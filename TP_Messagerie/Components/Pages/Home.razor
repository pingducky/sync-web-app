@page "/"
@using MudBlazor
@using TP_Messagerie.Services
@inject UserSession UserSession
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ConversationService ConversationService
@inject MessageService MessageService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<p>@isConnected</p>
<p>savedUnsentMessages.Count : @savedUnsentMessages?.Count </p>
<PageTitle>Home</PageTitle>
<MudContainer Class="messagerie-container pa-0">
    <MudItem xs="12" sm="4" Class="contacts-list-container">
        <ContactsList OnContactSelected="HandleContactSelected" conversations="conversations" />
    </MudItem>
    <MudItem xs="12" sm="8" Class="message-display-container">
        <MudPaper Elevation="4" Class="message-paper">
            <ConversationMessages
            ConversationName="test"
            RecipientName="@RecipientName"
            OnReloadConversations="ReloadConversation"
            InternetStatus="isConnected"
            UnsentMessages="UnsentMessages"
            />
        </MudPaper>
    </MudItem>
</MudContainer>
<InternetStatus OnConnectionStatusChanged="HandleConnectionStatusChanged"/>

@code {
    private string RecipientName { get; set; } = string.Empty;
    private List<Conversation> conversations { get; set; } = new List<Conversation>();
    private bool isConnected { get; set; } = false;
    public List<MessageCollection> UnsentMessages { get; set; } = new();
    private List<MessageCollection>? savedUnsentMessages;

    protected override async Task OnInitializedAsync()
    {
        if (UserSession.IsAuthenticated)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
            Snackbar.Add("Vous êtes connecté en tant que " + UserSession.UserName, Severity.Info);
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void HandleContactSelected(string recipientName)
    {
        RecipientName = recipientName;
    }

    private bool isHandlingConnectionChange = false;

    private async void HandleConnectionStatusChanged(bool isConnected)
    {
        if (isHandlingConnectionChange) return; // Si déjà en cours, on ignore
        isHandlingConnectionChange = true;

        try
        {
            this.isConnected = isConnected;

            if (isConnected)
            {
                savedUnsentMessages = await LocalStorage.GetItemAsync<List<MessageCollection>>("savedUnsentMessages");
                if (savedUnsentMessages != null && savedUnsentMessages.Count != 0)
                {
                    // Envoi des messages non envoyés
                    await MessageService.SendMessagesAsync(savedUnsentMessages);

                    // Supprime les messages stockés après envoi
                    await LocalStorage.RemoveItemAsync("savedUnsentMessages");
                    savedUnsentMessages = new List<MessageCollection>();
                }
            }
            else
            {
                // Stocker les messages en local si déconnecté
                savedUnsentMessages = await LocalStorage.GetItemAsync<List<MessageCollection>>("savedUnsentMessages");
            }
        }
        finally
        {
            isHandlingConnectionChange = false;
        }
    }


    private async void ReloadConversation()
    {
        conversations = await ConversationService.GetConversationsForCurrentUserAsync();
        StateHasChanged();
    }
}


<style>
    .messagerie-container {
        display: flex;
        flex-direction: row;
        height: 100vh;
        max-width: none;
    }

    .contacts-list-container {
        width: 40%;
        border-right: 1px solid var(--mud-palette-grey-lighten-2);
    }

    .message-display-container {
        flex-grow: 1;
    }

    .message-paper {
        height: 100%;
    }
</style>
