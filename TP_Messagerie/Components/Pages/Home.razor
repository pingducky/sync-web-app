@page "/"
@using MudBlazor
@using TP_Messagerie.Services
@inject UserSession UserSession
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ConversationService ConversationService

<p>@isConnected</p>
<PageTitle>Home</PageTitle>
<LocalStorageTesting/>
<MudContainer Class="messagerie-container pa-0">
    <MudItem xs="12" sm="4" Class="contacts-list-container">
        <ContactsList OnContactSelected="HandleContactSelected" conversations="conversations" />
    </MudItem>
    <MudItem xs="12" sm="8" Class="message-display-container">
        <MudPaper Elevation="4" Class="message-paper">
            <ConversationMessages ConversationName="test"
            RecipientName="@RecipientName"
            OnReloadConversations="ReloadConversation" />
        </MudPaper>
    </MudItem>
</MudContainer>
<InternetStatus OnConnectionStatusChanged="HandleConnectionStatusChanged"/>

@code {
    private string RecipientName { get; set; } = string.Empty;
    private List<Conversation> conversations { get; set; } = new List<Conversation>();
    private bool isConnected { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (UserSession.IsAuthenticated)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
            Snackbar.Add("Vous êtes connecté en tant que " + UserSession.UserName, Severity.Info);
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
        // conversations = await ConversationService.GetConversationsForCurrentUserAsync();
    }

    private void HandleContactSelected(string recipientName)
    {
        RecipientName = recipientName;
    }

    private void HandleConnectionStatusChanged(bool isConnected)
    {
        this.isConnected = isConnected;
    }

    private async void ReloadConversation()
    {
        Console.WriteLine("ReloadConversation has been called."); // Ajout du message de debug
        conversations = await ConversationService.GetConversationsForCurrentUserAsync();
        StateHasChanged();
    }

}

<style>
    .messagerie-container {
        display: flex;
        flex-direction: row;
        height: 100vh;
        max-width: none;
    }

    .contacts-list-container {
        width: 40%;
        border-right: 1px solid var(--mud-palette-grey-lighten-2);
    }

    .message-display-container {
        flex-grow: 1;
    }

    .message-paper {
        height: 100%;
    }
</style>
