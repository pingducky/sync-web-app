@page "/"
@using MudBlazor
@using TP_Messagerie.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject UserSession UserSession
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ConversationService ConversationService
@inject MessageService MessageService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>
<MudContainer Class="messagerie-container pa-0">
    <MudItem xs="12" sm="4" Class="contacts-list-container">
        <ContactsList OnContactSelected="HandleContactSelected" conversations="conversations" />
    </MudItem>
    <MudItem xs="12" sm="8" Class="message-display-container">
        <MudPaper Elevation="4" Class="message-paper">
            <ConversationMessages
            ConversationName="test"
            RecipientName="@RecipientName"
            OnReloadConversations="LoadConversation"
            InternetStatus="isConnected"
            UnsentMessages="UnsentMessages"
            Messages="Messages"
            OnLoadMessages="LoadMessages" />
        </MudPaper>
    </MudItem>
</MudContainer>
<InternetStatus OnConnectionStatusChanged="HandleConnectionStatusChanged"/>

@code {
    [Inject]
    private Cassandra.ISession CassandraSession { get; set; } = default!;
    private string RecipientName { get; set; } = string.Empty;
    private List<Conversation> conversations { get; set; } = new List<Conversation>();
    private bool isConnected { get; set; } = false;
    public List<MessageCollection> UnsentMessages { get; set; } = new();
    private List<MessageCollection>? savedUnsentMessages;
    private List<Conversation>? savedNotUpdatedConversations;
    private List<MessageCollection>? Messages = new List<MessageCollection>();
    private HubConnection? hubConnection;


    protected override async Task OnInitializedAsync()
    {
        if (UserSession.IsAuthenticated)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
            Snackbar.Add("Vous êtes connecté en tant que " + UserSession.UserName, Severity.Info);

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/messagehub"))
                .Build();

            hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {
                Messages.Add(new MessageCollection { Sender = user, Content = message });
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void HandleContactSelected(string recipientName)
    {
        RecipientName = recipientName;
        this.Messages = new List<MessageCollection>();
        this.UnsentMessages = new List<MessageCollection>();
    }

    private bool isHandlingConnectionChange = false;

    private async void HandleConnectionStatusChanged(bool isConnected)
    {
        if (isHandlingConnectionChange) return; // Si déjà en cours, on ignore
        isHandlingConnectionChange = true;
        try
        {
            this.isConnected = isConnected;

            if (isConnected)
            {
                // messages
                savedUnsentMessages = await LocalStorage.GetItemAsync<List<MessageCollection>>("savedUnsentMessages"); // Microsoft.JSInterop.JSDisconnectedException : 'JavaScript interop calls cannot be issued at this time. This is because the circuit has disconnected and is being disposed.'
                if (savedUnsentMessages != null && savedUnsentMessages.Count != 0)
                {
                    // Envoi des messages non envoyés
                    await MessageService.SendMessagesAsync(savedUnsentMessages);

                    // Supprime les messages stockés après envoi
                    await LocalStorage.RemoveItemAsync("savedUnsentMessages");
                    savedUnsentMessages = new List<MessageCollection>();
                    LoadMessages();
                }

                // conversations
                var savedNotUpdatedConversations = await LocalStorage.GetItemAsync<List<Conversation>>("savedNotUpdatedConversations");

                if (savedNotUpdatedConversations != null && savedNotUpdatedConversations.Count != 0)
                {
                    if (savedNotUpdatedConversations.Count > 0)
                    {
                        // Mettre à jour les dernières conversations via le service
                        await ConversationService.UpdateLastMessagesAsync(savedNotUpdatedConversations);

                        // Si les conversations ont été mises à jour avec succès, les supprimer du stockage local
                        await LocalStorage.RemoveItemAsync("savedNotUpdatedConversations");
                        savedNotUpdatedConversations = new List<Conversation>();
                        LoadConversation();
                    }
                }

                // logs
                List<Log>? savedUnsentLogs = await LocalStorage.GetItemAsync<List<Log>>("savedUnsentLogs");

                if (savedUnsentLogs != null && savedUnsentLogs.Count != 0)
                {
                    // Envoi des logs non envoyés
                    var loggerService = new LoggerService(CassandraSession);
                    loggerService.Logs(savedUnsentLogs);

                    // Supprime les messages stockés après envoi
                    await LocalStorage.RemoveItemAsync("savedUnsentLogs");
                }
            }
            else
            {
                // Stocker les messages en local si déconnecté
                savedUnsentMessages = await LocalStorage.GetItemAsync<List<MessageCollection>>("savedUnsentMessages");
            }
        }
        finally
        {
            isHandlingConnectionChange = false;
        }
    }

    private async void LoadMessages()
    {
        if (!string.IsNullOrEmpty(RecipientName))
        {
            // Charger les messages de la base de données pour la conversation
            if(isConnected) {
                Messages = await MessageService.GetMessagesBetweenUsersAsync(UserSession.UserName, RecipientName);
            }

            // Ajouter les messages non envoyés à la liste des messages
            if (UnsentMessages != null && UnsentMessages.Count > 0)
            {
                foreach (var unsentMessage in UnsentMessages)
                {
                    // Assurez-vous que le statut est `false` pour les messages non envoyés
                    unsentMessage.IsSent = false;
                }
                Messages.AddRange(UnsentMessages); // Ajouter les messages non envoyés à la liste des messages
            }

            StateHasChanged();  // Mettre à jour l'UI
        }
    }


    private async void LoadConversation()
    {
        conversations = await ConversationService.GetConversationsForCurrentUserAsync();
        StateHasChanged();
    }
}


<style>
    .messagerie-container {
        display: flex;
        flex-direction: row;
        height: 100vh;
        max-width: none;
    }

    .contacts-list-container {
        width: 40%;
        border-right: 1px solid var(--mud-palette-grey-lighten-2);
    }

    .message-display-container {
        flex-grow: 1;
    }

    .message-paper {
        height: 100%;
    }
</style>
