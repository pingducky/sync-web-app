@using MudBlazor
@using TP_Messagerie.Data
@using TP_Messagerie.Services

@inject MessageService MessageService
@inject UserSession UserSession
@inject ConversationService ConversationService

<p> Receiver : @RecipientName</p>
@if (!string.IsNullOrEmpty(RecipientName))
{
    <MudContainer Class="chat-container">
        <MudItem xs="12" Class="message-box">
            @foreach (var message in Messages.OrderBy(m => m.SentAt))
            {
                <Message Content="@message.Content"
                TimeStamp="@message.SentAt"
                IsSentByCurrentUser="@(UserSession.UserName == message.Sender)"
                Sender="@message.Sender" />
            }
        </MudItem>

        <MudContainer Class="input-container">
            <MudTextField @bind-Value="newMessageContent" Label="Type a message" FullWidth="true" />
            <MudButton OnClick="SendMessage" Color="Color.Primary" FullWidth="true">Send</MudButton>
        </MudContainer>
    </MudContainer>
}

@code {
    [Parameter]
    public required string ConversationName { get; set; }

    private List<MessageCollection> _messages = new();
    public List<MessageCollection> Messages
    {
        get => _messages;
        set => _messages = value;
    }

    private string _recipientName = string.Empty;
    [Parameter]
    public string RecipientName
    {
        get => _recipientName;
        set
        {
            if (_recipientName != value)
            {
                _recipientName = value;
                LoadMessages();
            }
        }
    }

    [Parameter]
    public EventCallback OnReloadConversations { get; set; } // Nouveau paramètre

    private string newMessageContent = string.Empty;

    private async void LoadMessages()
    {
        if (!string.IsNullOrEmpty(RecipientName))
        {
            Messages = await MessageService.GetMessagesBetweenUsersAsync(UserSession.UserName, RecipientName);
            StateHasChanged();
        }
    }

    private async void SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessageContent))
        {
            var message = new MessageCollection
                {
                    Sender = UserSession.UserName,
                    Receiver = RecipientName,
                    Content = newMessageContent,
                    SentAt = DateTime.Now
                };

            await MessageService.SendMessageAsync(message);
            await ConversationService.UpdateLastMessageAsync(newMessageContent, RecipientName);
            await OnReloadConversations.InvokeAsync(); // Appel de la méthode de rafraîchissement
            newMessageContent = string.Empty;
            LoadMessages();
        }
    }

    protected override async Task OnInitializedAsync() {
        await OnReloadConversations.InvokeAsync();
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    .message-box {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
        display: flex;
        flex-direction: column;
        max-height: calc(100vh - 140px); /* Limite la hauteur des messages pour qu'ils ne dépassent pas l'écran */
    }

    .input-container {
        display: flex;
        flex-direction: column;
        padding: 10px;
        border-top: 1px solid #ddd;
        max-height: 140px; /* Limite la hauteur du champ de saisie et du bouton */
    }

    .mud-text-field {
        margin-bottom: 10px;
    }

    .mud-button {
        margin-top: 10px;
    }
</style>