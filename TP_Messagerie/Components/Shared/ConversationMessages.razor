@using MudBlazor
@using TP_Messagerie.Data
@using TP_Messagerie.Services

@inject MessageService MessageService
@inject UserSession UserSession
@inject ConversationService ConversationService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<p>@InternetStatus</p>
@if (!string.IsNullOrEmpty(RecipientName))
{
    <MudContainer Class="chat-container">
        <MudItem xs="12" Class="message-box">
            @foreach (var message in Messages.OrderBy(m => m.SentAt))
            {
                <Message Content="@message.Content"
                TimeStamp="@message.SentAt"
                IsSentByCurrentUser="@(UserSession.UserName == message.Sender)"
                Sender="@message.Sender"
                IsSent="@message.IsSent" />
            }
            @* @foreach (var message in UnsentMessages.OrderBy(m => m.SentAt)) *@
            @* { *@
            @*     <Message Content="@message.Content" *@
            @*              TimeStamp="@message.SentAt" *@
            @*              IsSentByCurrentUser="@(UserSession.UserName == message.Sender)" *@
            @*              Sender="@message.Sender" *@
            @*              IsSent="false" /> *@
            @* } *@
        </MudItem>

        <MudContainer Class="input-container">
            <MudTextField @bind-Value="newMessageContent" Label="Type a message" FullWidth="true" />
            <MudButton OnClick="SendMessage" Color="Color.Primary" FullWidth="true">Send</MudButton>
        </MudContainer>
    </MudContainer>
}

@code {
    #region Paramètres
    [Parameter]
    public required string ConversationName { get; set; }

    [Parameter]
    public string RecipientName
    {
        get => _recipientName;
        set
        {
            if (_recipientName != value)
            {
                _recipientName = value;
                LoadMessages();
            }
        }
    }

    [Parameter]
    public EventCallback OnReloadConversations { get; set; }

    [Parameter]
    public bool InternetStatus { get; set; } = false;
    #endregion

    #region Variables locales
    private List<MessageCollection> _messages = new();
    public List<MessageCollection> Messages
    {
        get => _messages;
        set => _messages = value;
    }

    [Parameter]
    public List<MessageCollection> UnsentMessages { get; set; } = new();

    private string _recipientName = string.Empty;
    private string newMessageContent = string.Empty;
    #endregion

    #region Méthodes & fonctions
    private async void LoadMessages()
    {
        if (!string.IsNullOrEmpty(RecipientName))
        {
            // Charger les messages de la base de données pour la conversation
            Messages = await MessageService.GetMessagesBetweenUsersAsync(UserSession.UserName, RecipientName);

            // Ajouter les messages non envoyés à la liste des messages
            if (UnsentMessages != null && UnsentMessages.Count > 0)
            {
                foreach (var unsentMessage in UnsentMessages)
                {
                    // Assurez-vous que le statut est `false` pour les messages non envoyés
                    unsentMessage.IsSent = false;
                }
                Messages.AddRange(UnsentMessages); // Ajouter les messages non envoyés à la liste des messages
            }

            StateHasChanged();  // Mettre à jour l'UI
        }
    }

    private async void SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessageContent))
        {
            var message = new MessageCollection
                {
                    Sender = UserSession.UserName,
                    Receiver = RecipientName,
                    Content = newMessageContent,
                    SentAt = DateTime.Now,
                    IsSent = true
                };

            if (InternetStatus)
            {
                // Si on est connecté, on envoie le message
                await MessageService.SendMessageAsync(message);
                await ConversationService.UpdateLastMessageAsync(newMessageContent, RecipientName);
                await OnReloadConversations.InvokeAsync();
                LoadMessages();
            }
            else
            {
                // Si on est hors ligne, on garde les messages non envoyés en local
                List<MessageCollection> savedUnsentMessages = await LocalStorage.GetItemAsync<List<MessageCollection>>("savedUnsentMessages") ?? new List<MessageCollection>();
                savedUnsentMessages.Add(message);
                newMessageContent = string.Empty;
                await LocalStorage.SetItemAsync("savedUnsentMessages", savedUnsentMessages);
                UnsentMessages = savedUnsentMessages;
            }
        }
    }
    #endregion

    #region Evènement
    protected override async Task OnInitializedAsync()
    {
        // Charger les messages lors de l'initialisation
        await OnReloadConversations.InvokeAsync();
    }
    #endregion
}
<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    .message-box {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
        display: flex;
        flex-direction: column;
        max-height: calc(100vh - 140px);
    }

    .input-container {
        display: flex;
        flex-direction: column;
        padding: 10px;
        border-top: 1px solid #ddd;
        max-height: 140px;
    }

    .mud-text-field {
        margin-bottom: 10px;
    }

    .mud-button {
        margin-top: 10px;
    }
</style>