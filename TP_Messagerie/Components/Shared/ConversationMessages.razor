@using MudBlazor
@using TP_Messagerie.Data
@using TP_Messagerie.Services

@inject MessageService MessageService
@inject UserSession UserSession
@inject ConversationService ConversationService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@if (!string.IsNullOrEmpty(RecipientName))
{
    <MudContainer Class="chat-container">
        <MudItem xs="12" Class="message-box">
            @foreach (var message in Messages.OrderBy(m => m.SentAt))
            {
                if(message.Receiver == RecipientName) {
                    <Message Content="@message.Content"
                    TimeStamp="@message.SentAt"
                    IsSentByCurrentUser="@(UserSession.UserName == message.Sender)"
                    Sender="@message.Sender"
                    IsSent="@message.IsSent" />
                }
            }
        </MudItem>

        <MudContainer Class="input-container">
            <MudTextField @bind-Value="newMessageContent" Label="Type a message" FullWidth="true" />
            <MudButton OnClick="SendMessage" Color="Color.Primary" FullWidth="true">Send</MudButton>
        </MudContainer>
    </MudContainer>
}

@code {
    #region Paramètres
    [Parameter]
    public required string ConversationName { get; set; }

    [Parameter]
    public string RecipientName
    {
        get => _recipientName;
        set
        {
            if (_recipientName != value)
            {
                _recipientName = value;
                _ = LoadMessagesAsync(); // Appel de la méthode pour charger les messages
            }
        }
    }

    [Parameter]
    public EventCallback OnReloadConversations { get; set; }

    [Parameter]
    public bool InternetStatus { get; set; } = false;
    [Parameter]
    public List<MessageCollection> Messages { get; set; }
    #endregion

    #region Variables locales
    [Parameter]
    public List<MessageCollection> UnsentMessages { get; set; } = new();
    [Parameter]
    public EventCallback OnLoadMessages { get; set; }


    private string _recipientName = string.Empty;
    private string newMessageContent = string.Empty;
    #endregion

    #region Méthodes & fonctions
    private async Task LoadMessagesAsync()
    {
        await OnLoadMessages.InvokeAsync();
    }

    private async void SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessageContent))
        {
            var message = new MessageCollection
                {
                    Sender = UserSession.UserName,
                    Receiver = RecipientName,
                    Content = newMessageContent,
                    SentAt = DateTime.Now,
                    IsSent = true
                };

            var conversation = new Conversation
                {
                    Participants = new List<string> { UserSession.UserName, RecipientName },
                    LastMessage = newMessageContent,
                    LastUserMessage = UserSession.UserName,
                    LastUpdated = DateTime.Now
                };

            if (InternetStatus)
            {
                await HandleOnlineMessageAsync(message);
            }
            else
            {
                await HandleOfflineMessageAsync(message, conversation);
            }
        }
    }


    private async Task HandleOfflineMessageAsync(MessageCollection message, Conversation conversation)
    {
        // Récupérer les messages non envoyés en local
        List<MessageCollection> savedUnsentMessages = await LocalStorage.GetItemAsync<List<MessageCollection>>("savedUnsentMessages") ?? new List<MessageCollection>();

        // Vérifiez si le message est déjà dans la liste
        if (!savedUnsentMessages.Any(m => m.Content == message.Content && m.SentAt == message.SentAt))
        {
            savedUnsentMessages.Add(message);
            await LocalStorage.SetItemAsync("savedUnsentMessages", savedUnsentMessages);
        }

        // Mettre à jour la liste locale des messages non envoyés
        UnsentMessages = savedUnsentMessages;

        // Ajouter les messages non envoyés dans la liste principale uniquement s'ils ne sont pas déjà présents
        foreach (var unsentMessage in UnsentMessages)
        {
            if (!Messages.Any(m => m.Content == unsentMessage.Content && m.SentAt == unsentMessage.SentAt))
            {
                Messages.Add(unsentMessage);
            }
        }

        // Marquer tous les messages non envoyés comme "non envoyés"
        foreach (var unsentMessage in UnsentMessages)
        {
            unsentMessage.IsSent = false;
        }

        newMessageContent = string.Empty;
    }


    private async Task HandleOnlineMessageAsync(MessageCollection message)
    {
        // Si on est connecté, on envoie le message
        await MessageService.SendMessageAsync(message);
        await ConversationService.UpdateLastMessageAsync(message.Content, RecipientName);
        await OnReloadConversations.InvokeAsync();
        await OnLoadMessages.InvokeAsync();
        newMessageContent = string.Empty;
    }


    #endregion

    #region Evènement
    protected override async Task OnInitializedAsync()
    {
        // Charger les messages lors de l'initialisation
        await OnReloadConversations.InvokeAsync();
        await OnLoadMessages.InvokeAsync();
    }
    #endregion
}
<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    .message-box {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
        display: flex;
        flex-direction: column;
        max-height: calc(100vh - 140px);
    }

    .input-container {
        display: flex;
        flex-direction: column;
        padding: 10px;
        border-top: 1px solid #ddd;
        max-height: 140px;
    }

    .mud-text-field {
        margin-bottom: 10px;
    }

    .mud-button {
        margin-top: 10px;
    }
</style>